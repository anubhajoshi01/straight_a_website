import * as React from "react";
import type { Descendant } from "@reach/descendants";
import type { Position } from "@reach/popover";
import type * as Polymorphic from "@reach/utils/polymorphic";
declare const useDropdownContext: (childName: string) => InternalDropdownContextValue;
declare const DropdownProvider_: React.FC<DropdownProviderProps>;
interface DropdownProviderProps {
    children: React.ReactNode | ((props: DropdownContextValue & {
        isOpen: boolean;
    }) => React.ReactNode);
    id?: string;
}
declare function useDropdownTrigger({ onKeyDown, onMouseDown, id, ref: forwardedRef, ...props }: DropdownTriggerProps & React.ComponentPropsWithoutRef<"button"> & {
    ref: React.ForwardedRef<HTMLButtonElement>;
}): {
    data: {
        isExpanded: boolean;
        controls: string | undefined;
    };
    props: {
        ref: (node: any) => void;
        id: string | undefined;
        onKeyDown: (event: React.KeyboardEvent<HTMLButtonElement>) => any;
        onMouseDown: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => any;
        type: "button";
        children: React.ReactNode;
        form?: string | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLButtonElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLButtonElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
        onChange?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onReset?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onError?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLButtonElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLButtonElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLButtonElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLButtonElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
        name?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        value?: string | number | readonly string[] | undefined;
    };
};
declare const DropdownTrigger: Polymorphic.ForwardRefComponent<"button", DropdownTriggerProps>;
interface DropdownTriggerProps {
    children: React.ReactNode;
}
declare function useDropdownItem({ index: indexProp, isLink, onClick, onDragStart, onMouseDown, onMouseEnter, onMouseLeave, onMouseMove, onMouseUp, onSelect, disabled, onFocus, valueText: valueTextProp, ref: forwardedRef, ...props }: DropdownItemProps & React.ComponentPropsWithoutRef<"div"> & {
    ref: React.ForwardedRef<HTMLDivElement>;
}): {
    data: {
        disabled: boolean | undefined;
    };
    props: {
        ref: (node: any) => void;
        "data-disabled": string | undefined;
        "data-selected": string | undefined;
        "data-valuetext": string;
        onClick: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        onDragStart: (event: React.DragEvent<HTMLDivElement>) => any;
        onMouseDown: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        onMouseEnter: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        onMouseLeave: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        onMouseMove: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        onFocus: (event: React.FocusEvent<HTMLDivElement>) => any;
        onMouseUp: (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => any;
        children: React.ReactNode;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        id: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex: number;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
    };
};
/**
 * DropdownItem
 */
declare const DropdownItem: Polymorphic.ForwardRefComponent<"div", DropdownItemProps>;
interface DropdownItemProps {
    children: React.ReactNode;
    onSelect(): void;
    index?: number;
    isLink?: boolean;
    valueText?: string;
    disabled?: boolean;
}
declare function useDropdownItems({ id, onKeyDown, ref: forwardedRef, ...props }: DropdownItemsProps & React.ComponentPropsWithoutRef<"div"> & {
    ref: React.ForwardedRef<HTMLDivElement>;
}): {
    data: {
        activeDescendant: string | undefined;
        triggerId: string | null;
    };
    props: {
        ref: (node: any) => void;
        id: string | undefined;
        onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>) => any;
        children: React.ReactNode;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden?: boolean | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex: number;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
    };
};
/**
 * DropdownItem
 */
declare const DropdownItems: Polymorphic.ForwardRefComponent<"div", DropdownItemsProps>;
interface DropdownItemsProps {
    children: React.ReactNode;
}
declare function useDropdownPopover({ onBlur, portal, position, ref: forwardedRef, ...props }: DropdownPopoverProps & React.ComponentPropsWithoutRef<"div"> & {
    ref: React.ForwardedRef<HTMLDivElement>;
}): {
    data: {
        portal: boolean;
        position: Position | undefined;
        targetRef: TriggerRef;
        isExpanded: boolean;
    };
    props: {
        children: React.ReactNode;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: (boolean | "true" | "false") | "inherit" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        hidden: boolean;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        translate?: "yes" | "no" | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "text" | "none" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "list" | "none" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "dialog" | "menu" | "true" | "false" | "grid" | "listbox" | "tree" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "polite" | "assertive" | "off" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        ref: (node: any) => void;
        onBlur: (event: React.FocusEvent<HTMLDivElement>) => any;
    };
};
declare const DropdownPopover: Polymorphic.ForwardRefComponent<"div", DropdownPopoverProps>;
interface DropdownPopoverProps {
    children: React.ReactNode;
    portal?: boolean;
    position?: Position;
}
interface DropdownState {
    isExpanded: boolean;
    selectionIndex: number;
    triggerId: null | string;
    typeaheadQuery: string;
}
declare type DropdownAction = {
    type: "CLICK_MENU_ITEM";
} | {
    type: "CLOSE_MENU";
} | {
    type: "OPEN_MENU_AT_FIRST_ITEM";
} | {
    type: "OPEN_MENU_AT_INDEX";
    payload: {
        index: number;
    };
} | {
    type: "OPEN_MENU_CLEARED";
} | {
    type: "SELECT_ITEM_AT_INDEX";
    payload: {
        dropdownRef?: React.RefObject<HTMLElement | null>;
        index: number;
        max?: number;
        min?: number;
    };
} | {
    type: "CLEAR_SELECTION_INDEX";
} | {
    type: "SET_BUTTON_ID";
    payload: string;
} | {
    type: "SEARCH_FOR_ITEM";
    payload: string;
};
declare function useDropdownDescendants(): DropdownDescendant[];
declare type DropdownDescendant = Descendant<HTMLElement> & {
    key: string;
    isLink: boolean;
    disabled?: boolean;
};
declare type TriggerRef = React.RefObject<null | HTMLElement>;
declare type DropdownRef = React.RefObject<null | HTMLElement>;
declare type PopoverRef = React.RefObject<null | HTMLElement>;
interface InternalDropdownContextValue {
    dispatch: React.Dispatch<DropdownAction>;
    dropdownId: string | undefined;
    dropdownRef: DropdownRef;
    mouseDownStartPosRef: React.MutableRefObject<{
        x: number;
        y: number;
    }>;
    popoverRef: PopoverRef;
    readyToSelect: React.MutableRefObject<boolean>;
    selectCallbacks: React.MutableRefObject<(() => void)[]>;
    state: DropdownState;
    triggerClickedRef: React.MutableRefObject<boolean>;
    triggerRef: TriggerRef;
}
interface DropdownContextValue {
    isExpanded: boolean;
}
export type { DropdownTriggerProps, DropdownItemProps, DropdownItemsProps, DropdownPopoverProps, DropdownProviderProps, };
export { DropdownProvider_ as DropdownProvider, DropdownTrigger, DropdownItem, DropdownItems, DropdownPopover, useDropdownTrigger, useDropdownItem, useDropdownItems, useDropdownPopover, useDropdownContext, useDropdownDescendants, };
